/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package classes.presentacio;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import controladors.Ctrl_Presentacio;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import java.time.Duration;
import javax.swing.JOptionPane;

import javax.swing.JFrame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;






/**
 * Classe PrincipalView conte el panell principal on es carreguen les diferent vistes de l'aplicacio.
 * Aquesta classe es responsable de gestionar diferents sub-vistes de l'aplicacio.
 *
 * @author marti
 */
public class PrincipalView extends javax.swing.JFrame {
    
    private final Ctrl_Presentacio CtrlPresentacio;
    
    IniciarSessioView IniciarSessioView = new IniciarSessioView(this);
    CrearSessioView CrearSessioView = new CrearSessioView(this);
    MainView MainView = new MainView(this);
    JocView JocView = new JocView(this);
    SeleccioView SeleccioView = new SeleccioView(this);
    GenerarView GenerarView = new GenerarView(this);
    JugantView JugantView = new JugantView(this);
    CarregarKenkenView CarregarKenkenView = new CarregarKenkenView(this);
    RankingView RankingView = new RankingView(this);
    Seleccio2View Seleccio2View = new Seleccio2View(this);
    
    Integer N,R; //mida i regions
    public JLabel[][] operaciones;
    public JButton[][] valores;
    public JButton seleccionado;

    Integer seleccionado_x = -1;
    Integer seleccionado_y = -1;
    
    String nomJugador = "user3";//-1 no hay jugador iniciado
    Boolean kenkenBD  = true; //true es de la bd, false es de jugador
    Integer idKenken = 4;
    Integer idPartida = -1; //-1 no hay partida iniciada
    Boolean red = false;
    HashMap<AbstractMap.SimpleEntry<Integer, Integer>, Integer> celaerronea = new HashMap<>();
    /**
     * Assigna una nova instancia de PrincipalView i inicialitza els components.
     * 
     * @param CtrlPresentacio El controlador de presentacio associat.
     */
    public PrincipalView(Ctrl_Presentacio CtrlPresentacio) {
        this.CtrlPresentacio = CtrlPresentacio;
        initComponents();
        this.setLocationRelativeTo(null);
       
        showPanel("MainView");
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        principal = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(800, 800));
        setPreferredSize(new java.awt.Dimension(800, 800));
        setSize(new java.awt.Dimension(800, 800));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        principal.setBackground(new java.awt.Color(204, 204, 255));
        principal.setMaximumSize(new java.awt.Dimension(800, 800));
        principal.setMinimumSize(new java.awt.Dimension(800, 800));
        principal.setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout principalLayout = new javax.swing.GroupLayout(principal);
        principal.setLayout(principalLayout);
        principalLayout.setHorizontalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        principalLayout.setVerticalGroup(
            principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(idKenken != -1){
            String nom = nomJugador;
            if(kenkenBD) nom = "bd";
            CtrlPresentacio.pausarPartida(idKenken, nom, JugantView.getTemps());
        }
        CtrlPresentacio.sortir();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing


    
    
    
    /**
     * Resol el nom de la vista i retorna el panell corresponent.
     * Inicialitza la vista si es necessari.
     *
     * @param a El nom de la vista que es vol obtenir.
     * @return El panell corresponent a la vista especificada.
     */
    private JPanel resovlernombre(String a) {
        if(a.equals("IniciarSessioView")){
            IniciarSessioView.ini();
            return IniciarSessioView;
        }
        else if(a.equals("CrearSessioView")){
            CrearSessioView.ini();
            return CrearSessioView;
        }
        else if(a.equals("JocView")) return JocView;
        else if(a.equals("SeleccioView")){
            SeleccioView.ini(nomJugador);
            return SeleccioView;
        }
        else if(a.equals("GenerarView")){
            GenerarView.ini();
            return GenerarView;
        }
        else if(a.equals("JugantView")){

            return JugantView;
        }
        else if(a.equals("CarregarKenkenView")) return CarregarKenkenView;
        else if(a.equals("RankingView")){
            RankingView.ini(CtrlPresentacio.getRanking(idKenken,nomJugador),nomJugador);
 
            return RankingView;
        }
        else if(a.equals("Seleccio2View")){
            if(idKenken != -1){
                idPartida = -1;
                if(kenkenBD) Seleccio2View.ini("bd",idKenken);
                else Seleccio2View.ini(nomJugador,idKenken);
                
                return Seleccio2View;
            }

        }
        return MainView;
    }
    

    /**
     * Mostra el panell corresponent al nom especificat.
     * Inicialitza i configura el panell abans de mostrar-lo.
     *
     * @param a El nom del panell que es vol mostrar.
     */
    public void showPanel(String a) {
        
        JPanel p = resovlernombre(a);
        p.setSize(800,800);
        p.setLocation(0, 0);
        
        principal.removeAll();
        principal.add(p,BorderLayout.CENTER);
        principal.revalidate();
        principal.repaint();
        
    }
    

    public String[] getInfoRanking(Integer id,String nom){
        return CtrlPresentacio.getInfoRanking(id,nom);
    }
    
    public Integer getIdPartida(){
        return idPartida;
    }
    
    public void setUsuari(String nom){
        nomJugador = nom;
    }
    
    public void setIdKenken(String kenken){
        JsonObject KenkenJSON = new Gson().fromJson(kenken, JsonObject.class);
        idKenken = KenkenJSON.has("id") ? KenkenJSON.get("id").getAsInt() : -1;
    }
    
    public Integer getIdKenken(){
        return idKenken;
    }
    
    public void setIdKenken(Integer valor){
        idKenken = valor;
    }
    
    public void setBd(Boolean valor){
        kenkenBD = valor;
    }
    
    public String getNomJugador(){
        return nomJugador;
    }
    
    public Boolean getBd(){
        return kenkenBD;
    }
    
    public Boolean existeixPartida(Integer id,String nom){
       return CtrlPresentacio.existeixPartida(id,nom);
    }
    
    public Boolean existeixRanking(){
        return CtrlPresentacio.existeixRanking(idKenken);
    }
    
    public String obtenirKenken(Integer id,String nom){
        return CtrlPresentacio.obtenirKenken(id,nom);
    }
    
    public String obtenirKenkenPartida(Integer id,String nom){
        return CtrlPresentacio.obtenirKenkenPartida(id,nom);
    }
    
    public void eliminarKenken(Integer id,String nom){
        CtrlPresentacio.eliminarKenken(id,nom);
    }
    
    public String getAllKenkens(String nom){

        return CtrlPresentacio.getAllKenkens(nom);
    }
    
    public void desferSeleccionat(){
        seleccionado.getParent().setBackground(Color.WHITE);
        seleccionado_x = -1;
        seleccionado_y = -1;
    }

    /**
     * Genera un KenKen amb les especificacions donades.
     *
     * @param mida La mida del KenKen (nombre de files i columnes).
     * @param nConjunts El nombre de conjunts de regions en el KenKen.
     * @param ncColocades El nombre de celles ja collocades en el KenKen.
     * @param operacions Un array de booleans que indica les operacions a utilitzar (suma, resta, multiplicacio, divisio).
     * @return Un string en format JSON que representa el KenKen generat.
     */

    public Integer generarKenken(Integer mida, Integer nConjunts, Integer ncColocades, Boolean[] operacions) throws Exception{
        Integer kenkenJSON = CtrlPresentacio.generarKenken(mida, nConjunts, ncColocades, operacions);
        return kenkenJSON;
    }

    /**
     * Crea i inicialitza un tauler de joc KenKen segons les especificacions proporcionades.
     *
     * @param info La informacio del KenKen, incloent la mida, regions i celles.
     * @param el_Panel1 El nom del panell on es mostrara el KenKen.
     * @param tipus El tipus de KenKen (pot ser "jugable" o no).
     */
    void crearKenken(ArrayList<String> info, String el_Panel1, String tipus){
        
        JPanel el_Panel = CarregarKenkenView.getTaulell();
        el_Panel.removeAll();
        
        String[] parts0 = info.get(0).split(" "); // Divide la linea en partes separadas por espacio

        N = Integer.parseInt(parts0[0]); // Devuelve la primera parte como un entero
        R = Integer.parseInt(parts0[1]);

            
        operaciones = new JLabel[N][N];
        valores = new JButton[N][N];
        el_Panel.setLayout(new GridLayout(N,N,0,0));
        
        for(Integer i= 0; i < N; ++i){ //creo el tablero principal
            for(Integer j= 0; j < N; ++j){ 
                JPanel tablero = new JPanel();
                operaciones[i][j] = new JLabel();
                valores[i][j] = new JButton();
                
                tablero.setBackground(new java.awt.Color(255, 255, 255));
                tablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                operaciones[i][j].setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
                operaciones[i][j].setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                
                operaciones[i][j].setText(" ");

                valores[i][j].setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
                valores[i][j].setText(" ");
                valores[i][j].setBorder(null);
                valores[i][j].setBorderPainted(false);
                valores[i][j].setContentAreaFilled(false);
                if(tipus == "jugable"){
                    valores[i][j].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    operaciones[i][j].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                }
                
                
                
                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(tablero);
                tablero.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                     jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(valores[i][j], javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                     .addComponent(operaciones[i][j], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(operaciones[i][j], javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(valores[i][j], javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                );
                
                if(tipus == "jugable"){
                    valores[i][j].addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            JButton botonClicado = (JButton) e.getSource();
                            if(seleccionado == null){//no hay boton seleccionado
                                seleccionado = botonClicado;
                                botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                
                            }else{//hay boton seleccionado
                                seleccionado.getParent().setBackground(Color.WHITE);
                                if(seleccionado != botonClicado){
                                    seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                }else{
                                    seleccionado = null;
                                }
                            }
                            botonClicado.revalidate();
                            botonClicado.repaint();
                            Container contenedor = botonClicado.getParent(); // Obtener el contenedor del boton
                            if (contenedor != null) {
                                contenedor.revalidate(); // Revalidar el contenedor
                                contenedor.repaint();    // Repintar el contenedor
                            }
                        }
                    });
                    
                    operaciones[i][j].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            //System.out.println("hola2");
                            JLabel label = (JLabel) e.getSource();
                            JButton botonClicado = getBoton(label.getParent());
                            if(seleccionado == null){//no hay boton seleccionado
                                seleccionado = botonClicado;
                                botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                            }else{//hay boton seleccionado
                                seleccionado.getParent().setBackground(Color.WHITE);
                                if(seleccionado != botonClicado){
                                    seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                }else{
                                    seleccionado = null;
                                }
                            }
                            botonClicado.revalidate();
                            botonClicado.repaint();
                            Container contenedor = botonClicado.getParent(); // Obtener el contenedor del boton
                            if (contenedor != null) {
                                contenedor.revalidate(); // Revalidar el contenedor
                                contenedor.repaint();    // Repintar el contenedor
                            }
                        }
                    });
                }
                
                el_Panel.add(tablero);
                
            }
        }

        //creo los conjuntos
        
        Integer minSuma = -1;
        Integer xMin = 0;
        for(Integer i= 0; i <R; ++i){
            
            Integer op,res,nCel;
            String[] parts = info.get(1+i).split(" "); 
            op = Integer.parseInt(parts[0]);
            res = Integer.parseInt(parts[1]);
            nCel = Integer.parseInt(parts[2]);
            
            Map<Integer, List<AbstractMap.SimpleEntry<Integer, Integer>>> cjt = new HashMap<>();
            Integer x,y;
            for(Integer j= 0; j <nCel; ++j){
                
                x = Integer.parseInt(parts[3+(j*2)]);
                y = Integer.parseInt(parts[3+1+(j*2)]);
                Integer suma = x+y;
                if(cjt.containsKey(suma)){
                     List<AbstractMap.SimpleEntry<Integer, Integer>> a = new ArrayList<>();
                     a = cjt.get(suma);
                     a.add(new AbstractMap.SimpleEntry<>(x,y));
                     cjt.put(suma, a);
                }else{
                    List<AbstractMap.SimpleEntry<Integer, Integer>> a = new ArrayList<>();
                    a.add(new AbstractMap.SimpleEntry<>(x,y));
                    cjt.put(suma, a);
                }
                if(j==0){
                    minSuma = suma;
                    xMin = x;
                }
                if(suma <= minSuma){
                    minSuma = suma;
                    xMin = x;
                }
            }  
            x = xMin;
            y = minSuma-x;
            
            operaciones[x-1][y-1].setText(" "+res +calcularSimbol(op) );
            
            dibujarBordes(cjt);
        }
    }    
    
    /**
     * Crea i inicialitza un tauler de joc KenKen segons les especificacions proporcionades en format JSON.
     *
     * @param info La informacio del KenKen en format JSON, incloent la mida, regions i celles.
     * @param el_Panel1 El nom del panell on es mostrara el KenKen.
     * @param tipus El tipus de KenKen (pot ser "jugable" o no).
     */
    public void crearKenken2(String info, String el_Panel1, String tipus){
        
        JPanel el_Panel;
        if(tipus == "mostrar") el_Panel = CarregarKenkenView.getTaulell();
        else el_Panel = JugantView.getTaulell();
        el_Panel.removeAll();
        
        JsonObject KenkenJSON = new Gson().fromJson(info,JsonObject.class);
        N = KenkenJSON.has("N") ? KenkenJSON.get("N").getAsInt() : 0;
        R = KenkenJSON.has("R") ? KenkenJSON.get("R").getAsInt() : 0;
        
        
        operaciones = new JLabel[N][N];
        valores = new JButton[N][N];
        el_Panel.setLayout(new GridLayout(N,N,0,0));
        
        for(int i= 0; i < N; ++i){ //creo el tablero principal
            for(int j= 0; j < N; ++j){ 
                final int finalI = i;
                final int finalJ = j;
                JPanel tablero = new JPanel();
                operaciones[i][j] = new JLabel();
                valores[i][j] = new JButton();
                
                tablero.setBackground(new java.awt.Color(255, 255, 255));
                tablero.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

                operaciones[i][j].setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
                operaciones[i][j].setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                
                operaciones[i][j].setText(" ");

                valores[i][j].setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
                valores[i][j].setText(" ");
                valores[i][j].setBorder(null);
                valores[i][j].setBorderPainted(false);
                valores[i][j].setContentAreaFilled(false);
                if(tipus == "jugable"){
                    valores[i][j].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    operaciones[i][j].setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                }
                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(tablero);
                tablero.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                     jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(valores[i][j], javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                     .addComponent(operaciones[i][j], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(operaciones[i][j], javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(valores[i][j], javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                );
                
                if(tipus == "jugable"){
                    valores[i][j].addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            JButton botonClicado = (JButton) e.getSource();
                            if(seleccionado == null){//no hay boton seleccionado
                                seleccionado_x = finalI+1;
                                seleccionado_y = finalJ+1;
                                seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                
                            }else{//hay boton seleccionado
                                seleccionado.getParent().setBackground(Color.WHITE);
                              
                                if(seleccionado != botonClicado){
                       
                                    seleccionado_x = finalI+1;
                                    seleccionado_y = finalJ+1;
                                    seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                   
                                }else{
                                    seleccionado_x = finalI+1;
                                    seleccionado_y = finalJ+1;
                                    seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                }
                              
                            }
                            botonClicado.revalidate();
                            botonClicado.repaint();
                            Container contenedor = botonClicado.getParent(); // Obtener el contenedor del boton
                            if (contenedor != null) {
                                contenedor.revalidate(); // Revalidar el contenedor
                                contenedor.repaint();    // Repintar el contenedor
                            }
                        }
                    });
                    
                    operaciones[i][j].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            JLabel label = (JLabel) e.getSource();
                            JButton botonClicado = getBoton(label.getParent());
                            if(seleccionado == null){//no hay boton seleccionado
                                seleccionado_x = finalI+1;
                                seleccionado_y = finalJ+1;
                                seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                            
                            }else{//hay boton seleccionado
                                seleccionado.getParent().setBackground(Color.WHITE);
                                
                                if(seleccionado != botonClicado){
                       
                                    seleccionado_x = finalI+1;
                                    seleccionado_y = finalJ+1;
                                    seleccionado = botonClicado;
                                   
                                   
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                }else{
                                    seleccionado_x = finalI+1;
                                    seleccionado_y = finalJ+1;
                                    seleccionado = botonClicado;
                                    botonClicado.getParent().setBackground(new java.awt.Color(255, 153, 153));
                                }
                               
                          
                            }
                            botonClicado.revalidate();
                            botonClicado.repaint();
                            Container contenedor = botonClicado.getParent(); // Obtener el contenedor del boton
                            if (contenedor != null) {
                                contenedor.revalidate(); // Revalidar el contenedor
                                contenedor.repaint();    // Repintar el contenedor
                            }
                        }
                    });
                }
                
                el_Panel.add(tablero);
                
            }
        }
        
        
        
        //creo los conjuntos
        
        JsonArray conjuntsCelesArray = KenkenJSON.getAsJsonArray("regions");
        for (Integer i = 0; i < conjuntsCelesArray.size(); ++i) {
            
            JsonObject ConjuntCellaObj = conjuntsCelesArray.get(i).getAsJsonObject();
            Integer op,res,nCel; 
            op = ConjuntCellaObj.has("oper") ? ConjuntCellaObj.get("oper").getAsInt() : 0;
            res = ConjuntCellaObj.has("result") ? ConjuntCellaObj.get("result").getAsInt() : 0;
            nCel = ConjuntCellaObj.has("e") ? ConjuntCellaObj.get("e").getAsInt() : 0;
            
            Map<Integer, java.util.List<AbstractMap.SimpleEntry<Integer, Integer>>> cjt = new HashMap<>();
            JsonArray CelesArray = ConjuntCellaObj.getAsJsonArray("coordenades");
            
            Integer minSuma = -1;
            Integer xMin = 0;
            Integer x,y;
            for(Integer j= 0; j <nCel; ++j){
                JsonObject celaObject = CelesArray.get(j).getAsJsonObject();
                x = celaObject.has("x") ? celaObject.get("x").getAsInt() : 0;
                y = celaObject.has("y") ? celaObject.get("y").getAsInt() : 0;
                Integer suma = x+y;
                Integer cont = celaObject.has("cont") ? celaObject.get("cont").getAsInt() : 0;
                Integer ini = celaObject.has("ini") ? celaObject.get("ini").getAsInt() : 0;
                if(ini != 0){
                    valores[x-1][y-1].setForeground(new java.awt.Color(51,102,255));
                    valores[x-1][y-1].setText(String.valueOf(cont));
                } else if(cont != 0){
                    valores[x-1][y-1].setText(String.valueOf(cont));
                }
                
                if(cjt.containsKey(suma)){
                     java.util.List<AbstractMap.SimpleEntry<Integer, Integer>> a = new ArrayList<>();
                     a = cjt.get(suma);
                     a.add(new AbstractMap.SimpleEntry<>(x,y));
                     cjt.put(suma, a);
                }else{
                    java.util.List<AbstractMap.SimpleEntry<Integer, Integer>> a = new ArrayList<>();
                    a.add(new AbstractMap.SimpleEntry<>(x,y));
                    cjt.put(suma, a);
                }
                if(j==0){
                    minSuma = suma;
                    xMin = x;
                }
                if(suma <= minSuma){
                    minSuma = suma;
                    xMin = x;
                }
            }  
            
            x = xMin;
            y = minSuma-x;
            
            operaciones[x-1][y-1].setText(" "+res +calcularSimbol(op) );
            dibujarBordes(cjt);
        }
        el_Panel = JugantView.getTaulellNumeros();
        crearNumeros(N,el_Panel);
    }
    /**
     * Genera un JSON representant un tauler de joc KenKen a partir d'una llista d'informacio.
     *
     * @param info Una llista de cadenes que contenen la informacio del KenKen.
     * @return Una cadena JSON que representa el KenKen.
     */
    public String generarJson(ArrayList<String> info) throws Exception{
        String[] parts0 = info.get(0).split(" "); // Divide la linea en partes separadas por espacio
        if(parts0.length > 2) {
            throw new Exception("Format Kenken invalid");
        }//

        N = Integer.parseInt(parts0[0]); // Devuelve la primera parte como un entero
        R = Integer.parseInt(parts0[1]);
        JsonObject kenkenObject = new JsonObject();
        kenkenObject.addProperty("N", N);
        kenkenObject.addProperty("R", R);
        
        JsonArray conjuntsCelesArray = new JsonArray();
        
        for(Integer i = 1; i < info.size(); i++){
            JsonObject conjuntCellaObj = new JsonObject();
            
            String line = info.get(i);
            String[] parts = line.split(" ");
            
            Integer oper = Integer.parseInt(parts[0]);
            conjuntCellaObj.addProperty("oper", oper);
            Integer result = Integer.parseInt(parts[1]);
            conjuntCellaObj.addProperty("result", result);
            Integer e = Integer.parseInt(parts[2]);
            conjuntCellaObj.addProperty("e", e);
            
            Integer j = 3;
            JsonArray CelesArray = new JsonArray();
            while(j < parts.length){
                JsonObject CellaObj = new JsonObject();
                Integer x = Integer.parseInt(parts[j]);
                CellaObj.addProperty("x", x);
                Integer y = Integer.parseInt(parts[j+1]);
                CellaObj.addProperty("y", y);
                j = j + 2;
                if(j < parts.length) {
                    String part = parts[j];
                    if(part.startsWith("[") && part.endsWith("]")) {
                        Integer cont = Integer.parseInt(part.substring(1, part.length() - 1));
                        CellaObj.addProperty("cont", cont);
                        ++j;
                        if(j < parts.length){
                            String part2 = parts[j];
                            if(part2.startsWith("{") && part2.endsWith("}")) {
                                Integer ini = Integer.parseInt(part2.substring(1, part2.length() - 1));
                                
                                if(ini != 1 && ini != 0) {
                                    throw new Exception("Format Kenken invalid");
                                }
                                else {
                                    CellaObj.addProperty("ini", ini);
                                    ++j;
                                }
                            }
                        }
                        
                    }
                }
                CelesArray.add(CellaObj);
            }
            conjuntCellaObj.add("coordenades", CelesArray);
            conjuntsCelesArray.add(conjuntCellaObj);
        }
        kenkenObject.add("regions", conjuntsCelesArray);
        return kenkenObject.toString();       
    }

    /**
     * Crea botons numerats d'1 a N i els afegeix a un panell.
     *
     * @param N Nombre de botons a crear.
     * @param el_Panel Panell on s'afegeixen els botons creats.
     */
    private void  crearNumeros(Integer N, JPanel el_Panel){
        el_Panel.removeAll();
        
        el_Panel.setLayout(new GridLayout(1,N));
        for(Integer i=0; i < N ; ++i){
            JButton numero = new JButton();
            Integer valor = i+1;
            String texto = ""+valor;
            numero.setText(texto);
            
            numero.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JButton botonClicado = (JButton) e.getSource();
                    if(seleccionado == null){//no hay boton seleccionado
                          
                    }else{//hay boton seleccionado
                        String nom;
                        if(kenkenBD) nom = "bd";
                        else nom = nomJugador;
                        if(!CtrlPresentacio.celaInicial(seleccionado_x, seleccionado_y, idKenken, nom)){
                            if(CtrlPresentacio.colocarNum(botonClicado.getText(), seleccionado_x, seleccionado_y, idKenken, nom)){
                                    
                                seleccionado.getParent().setBackground(Color.WHITE);
                                seleccionado.setText(botonClicado.getText());
                                seleccionado_x = -1;
                                seleccionado_y = -1;
                                //seleccionado = null;
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Aquesta cel·la no es pot modificar", "Warning", JOptionPane.WARNING_MESSAGE);
                            
                            

                        }
                    }
                    
                }
            });
            
            el_Panel.add(numero);
        }
    }
    
    /**
     * Calcula el simbol corresponent a l'operacio donada.
     *
     * @param op L'operacio per a la qual es vol calcular el simbol.
     * @return El simbol corresponent a l'operacio donada.
     */
    public String calcularSimbol(Integer op){
        
        if(op == 1){//suma
            return "+";   
                
        }else if(op == 2){//resta
            return "-";     
                
        }else if(op == 3){//multiplicacio
            return "x";      
                
        }else if(op == 4){//divisio
            return "/";      
                
        }else if(op == 5){//maxim
            return "MAX";      
                
        }else if(op == 6){//minim
            return "MIN";      
        }
        return "";  
    }
    
    /**
     * Dibuixa els contorns de les celles del tauler del KenKen segons el conjunt de celles passat com a parametre.
     *
     * @param cjt Mapa que conte els conjunts de celles amb les seves relacions de contorn.
     */
    private void dibujarBordes(Map<Integer, java.util.List<AbstractMap.SimpleEntry<Integer, Integer>>> cjt){
        for (Map.Entry<Integer, java.util.List<AbstractMap.SimpleEntry<Integer, Integer>>> it : cjt.entrySet()) {
            //
            Integer key = it.getKey();
            java.util.List<AbstractMap.SimpleEntry<Integer, Integer>> valueList = it.getValue();
            
            
      
            for (AbstractMap.SimpleEntry<Integer, Integer> element : valueList) {
                Integer[] pintados = new Integer[4];//arriba abajo der izq
                    
                pintados[0] = 2;
                pintados[1] = 2;
                pintados[2] = 2;
                pintados[3] = 2;
                
                
                
                Integer x1,y1;
                y1 = element.getKey();
                x1 = element.getValue();
            
                if(cjt.containsKey(key-1)){
                    java.util.List<AbstractMap.SimpleEntry<Integer, Integer>> valueListAComprobar = cjt.get(key-1);


                    
                    for (AbstractMap.SimpleEntry<Integer, Integer> element2 : valueListAComprobar) {
                        Integer x2,y2;
                        y2 = element2.getKey();
                        x2 = element2.getValue(); 
                       
                        if(x1 == x2 && y1 == (y2+1)){//arriba
                            pintados[0] = 0;
                        }else if(x1 == x2 && y1 == (y2-1)){//abajo
                            pintados[1] = 0;
                        }else if(x1 == (x2+1) && y1 == y2){//derecha
                            pintados[3] = 0;
                        }else if(x1 == (x2-1) && y1 == y2){//izquierda   
                            pintados[2] = 0;
                        }  
                    }
                    


                    
                    
                }
                if(cjt.containsKey(key+1)){
                    java.util.List<AbstractMap.SimpleEntry<Integer, Integer>> valueListAComprobar = cjt.get(key+1);
       
                    for (AbstractMap.SimpleEntry<Integer, Integer> element2 : valueListAComprobar) {
                        Integer x2,y2;
                        y2 = element2.getKey();
                        x2 = element2.getValue();
                        if(x1 == x2 && y1 == (y2+1)){//arriba
                            pintados[0] = 0;
                        }else if(x1 == x2 && y1 == (y2-1)){//abajo
                            pintados[1] = 0;
                        }else if(x1 == (x2+1) && y1 == y2){//derecha
                            pintados[3] = 0;
                        }else if(x1 == (x2-1) && y1 == y2){//izquierda   
                            pintados[2] = 0;
                        }  
                    }
                }
                //arriba derecha abajo izq
                Border bordePersonalizado = BorderFactory.createMatteBorder(pintados[0], pintados[3], pintados[1], pintados[2], Color.BLACK);
                Integer[] no_pintados = new Integer[4];
                no_pintados[0] = no_pintados[1] = no_pintados[2] = no_pintados[3] = 0;
                if(pintados[0] == 0) no_pintados[0] = 1;
                if(pintados[1] == 0) no_pintados[1] = 1;
                if(pintados[2] == 0) no_pintados[2] = 1;
                if(pintados[3] == 0) no_pintados[3] = 1;    
                Border bordePersonalizado2 = BorderFactory.createMatteBorder(no_pintados[0], no_pintados[3], no_pintados[1],no_pintados[2],new java.awt.Color(204,204,204) );
                Border bordeCompuesto = BorderFactory.createCompoundBorder(bordePersonalizado, bordePersonalizado2);

                if (operaciones[y1-1][x1-1].getParent() instanceof JComponent) {
                    JComponent parent = (JComponent) operaciones[y1-1][x1-1].getParent();
                    parent.setBorder(bordeCompuesto);
                } else {
                    System.out.println("El padre no es un JComponent");
                }
            }
        }
    }
    
    /**
     * Obte el primer boto trobat dins del contenidor especificat.
     *
     * @param container El contenidor en el qual buscar el boto.
     * @return El primer boto trobat dins del contenidor, o null si no es troba cap boto.
     */
    private JButton getBoton(Container container) {
        for (Component component : container.getComponents()) {
            if (component instanceof JButton) {
                return (JButton) component;
            }
        }
        return null;
    }

    /**
     * Esborra el contingut del boto seleccionat i restableix el seu fons al color blanc.
     */
    public void borrar(){
        if(seleccionado != null){//no hay boton seleccionado
            String nom;
            if(kenkenBD) nom = "bd";
            else nom = nomJugador;
            if(!CtrlPresentacio.celaInicial(seleccionado_x, seleccionado_y, idKenken, nom)){
                if(CtrlPresentacio.esborrarNum(seleccionado_x, seleccionado_y, idKenken, nom)){
                    
                    seleccionado.getParent().setBackground(Color.WHITE);
                    
                    seleccionado.setText(" ");
                    seleccionado_x = -1;
                    seleccionado_y = -1;
                    //seleccionado = null;
                }
            }else {
                JOptionPane.showMessageDialog(null, "Aquesta cel·la no es pot modificar", "Warning", JOptionPane.WARNING_MESSAGE);

            }
        }
    }
    
    public Integer getSeleccionado_x(){
        return seleccionado_x;
    }
    
    public Integer getSeleccionado_y(){
        return seleccionado_y;
    }
    
    public String validarKenken(String json) throws Exception{
        return CtrlPresentacio.validarKenken(json);
    }
    
    public String solucionarKenken() throws Exception{
        return CtrlPresentacio.solucionarKenken(idKenken);   
    }
    
    public Boolean existsUsuari(String nom) {
        return CtrlPresentacio.existsUsuari(nom);   
    }
    
    public void getUsuari(String nom) throws Exception{
        CtrlPresentacio.getUsuari(nom);
    }
    
    public Boolean verificarContra(String contra) throws Exception{
        return CtrlPresentacio.verificarContra(contra);   
    }
    
    public void crearUsuari(String nom, String contra) throws Exception{
        CtrlPresentacio.crearUsuari(nom, contra);
    }
    
    public void eliminarPartida(Integer id, String nom){
        CtrlPresentacio.eliminarPartida(id,nom);
    }

    public void crearPartida(Integer id, String nom){
        CtrlPresentacio.crearPartida(id,nom);
    }
    
    public Duration getCronoPartida(){
        String nom;
        if(kenkenBD) nom = "bd";
        else nom = nomJugador;
        return CtrlPresentacio.getTempsPartida(idKenken, nom);
    }
    
    public Integer getPistesPartida(){
        String nom;
        if(kenkenBD) nom = "bd";
        else nom = nomJugador;
        return CtrlPresentacio.getPistesPartida(idKenken, nom);
    }
    
    public void setTempsPartida(Duration temps){
        String nom;
        if(kenkenBD) nom = "bd";
        else nom = nomJugador;
        CtrlPresentacio.setTempsPartida(idKenken, nom, temps);
    }
    
    public void ajuda(Integer x, Integer y) throws Exception{
        String nom = nomJugador;
        if(kenkenBD) nom = "bd";
        CtrlPresentacio.ajuda(x, y, idKenken, nom);
    }
    
    public void ajudaExtra(Integer x, Integer y) throws Exception{
        String nom = nomJugador;
        if(kenkenBD) nom = "bd";
        CtrlPresentacio.ajudaExtra(x, y, idKenken, nom);
    }
    
    public void getValorCela(Integer x, Integer y) throws Exception{
        String nom = nomJugador;
        if(kenkenBD) nom = "bd";
        String pista = CtrlPresentacio.getValorCela(x, y, idKenken, nom);
        seleccionado.setText(pista); 
        seleccionado.setForeground(new java.awt.Color(51,102,255));
    }
    
    public void getTempsPartida(){
        JugantView.getTempsPartida();
        //showPanel("MainView");
    }
    
    public void stopTemps(){
        JugantView.stopTemps();
    }
    
    public void finalitzarPartida(){
        JugantView.finalitzar();
        
        if(kenkenBD){
            idPartida = 1;
            showPanel("RankingView");
        } else {
            showPanel("JocView");
        }
    }
    
    public void continueTemps(){
        JugantView.continueTemps();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel principal;
    // End of variables declaration//GEN-END:variables
}
